Python教程
	前言
		用Python可以做什么？
			可以做日常任务，比如自动备份你的MP3；可以做网站，很多著名的网站包括YouTube就是Python写的；
			可以做网络游戏的后台，很多在线游戏的后台都是Python开发的。总之就是能干很多很多事啦。
		Python当然也有不能干的事情：
			比如写操作系统，这个只能用C语言写；写手机应用，只能用Swift/Objective-C（针对iPhone）和Java（针对Android）；写3D游戏，最好用C或C++。
			
	Python简介
		C语言是可以用来编写操作系统的贴近硬件的语言，所以，C语言适合开发那些追求运行速度、充分发挥硬件性能的程序。而Python是用来编写应用程序的高级编程语言。
		那Python适合开发哪些类型的应用呢？
			1.首选是网络应用，包括网站、后台服务等等；
			2.其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；
			3.另外就是把其他语言开发的程序再包装起来，方便使用。
		那Python有哪些缺点呢？
			1.第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。
			  而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。
			  例如开发一个下载MP3的网络应用程序，C程序的运行时间需要0.001秒，而Python程序的运行时间需要0.1秒，慢了100倍，
			  但由于网络更慢，需要等待1秒，你想，用户能感觉到1.001秒和1.1秒的区别吗？这就好比F1赛车和普通的出租车在北京三环路上行驶的道理一样，
			  虽然F1赛车理论时速高达400公里，但由于三环路堵车的时速只有20公里，因此，作为乘客，你感觉的时速永远是20公里。
			2.第二个缺点就是代码不能加密。如果要发布你的Python程序，实际上就是发布源代码，这一点跟C语言不同，C语言不用发布源代码，需要把编译后的机器码（也就是你在Windows上常见的xxx.exe文件）发布出去。
			  要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。
			  这个缺点仅限于你要编写的软件需要卖给别人挣钱的时候。好消息是目前的互联网时代，靠卖软件授权的商业模式越来越少了，靠网站和移动应用卖服务的模式越来越多了，后一种模式不需要把源码给别人。
			  再说了，现在如火如荼的开源运动和互联网自由开放的精神是一致的，互联网上有无数非常优秀的像Linux一样的开源代码，我们千万不要高估自己写的代码真的有非常大的“商业价值”。那些大公司的代码不愿意开放的更重要的原因是代码写得太烂了，一旦开源，就没人敢用他们的产品了。

安装Python
	前言
		因为Python是跨平台的，它可以运行在Windows、Mac和各种Linux/Unix系统上。在Windows上写Python程序，放到Linux上也是能够运行的。
		在Mac上安装Python
			如果你正在使用Mac，系统是OS X>=10.9，那么系统自带的Python版本是2.7。要安装最新的Python 3.7，有两个方法：
			方法一：从Python官网下载Python 3.7的安装程序（网速慢的同学请移步国内镜像），双击运行并安装；
			方法二：如果安装了Homebrew，直接通过命令brew install python3安装即可。
		在Linux上安装Python
			如果你正在使用Linux，那我可以假定你有Linux系统管理经验，自行安装Python 3应该没有问题，否则，请换回Windows系统。
			对于大量的目前仍在使用Windows的同学，如果短期内没有打算换Mac，就可以继续阅读以下内容。
		在Windows上安装Python(https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316090478912dab2a3a9e8f4ed49d28854b292f85bb000)
			1.首先，根据你的Windows版本（64位还是32位）从Python的官方网站下载Python 3.7对应的64位安装程序或32位安装程序（网速慢的同学请移步国内镜像），然后，运行下载的EXE安装包：
			2.特别要注意勾上Add Python 3.7 to PATH，然后点“Install Now”即可完成安装
		运行Python
			安装成功后，打开命令提示符窗口，敲入python后，会出现两种情况：
				情况一：
					PS C:\WINDOWS\system32> python
					Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)] on win32
					Type "help", "copyright", "credits" or "license" for more information.
					>>>
					看到上面的画面，就说明Python安装成功！你看到提示符>>>就表示我们已经在Python交互式环境中了，可以输入任何Python代码，回车后会立刻得到执行结果。
					现在，输入exit()并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。
				情况二：得到一个错误：
					‘python’ 不是内部或外部命令，也不是可运行的程序或批处理文件。
					看到上面的画面，建议把Python安装程序重新运行一遍，务必记得勾上Add Python 3.7 to PATH。
				
	Python解释器
		CPython
			当我们从Python官方网站下载并安装好Python 3.x后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。
			在命令行下运行python就是启动CPython解释器。CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。
		小结
			Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。
			本教程的所有代码只确保在CPython 3.x版本下运行。请务必在本地安装CPython（也就是从Python官方网站下载的安装程序）。
			
第一个Python程序
	前言
		1.命令行模式
			在Windows开始菜单选择“命令提示符”，就进入到命令行模式，它的提示符类似C:\>：
		2.Python交互模式
			在命令行模式下敲命令python，就看到类似如下的一堆文本输出，然后就进入到Python交互模式，它的提示符是>>>。
		3.也可以直接通过开始菜单选择Python (command line)菜单项，直接进入Python交互模式，但是输入exit()后窗口会直接关闭，不会回到命令行模式。
		4.如果要让Python打印出指定的文字，可以用print()函数，然后把希望打印的文字用单引号或者双引号括起来，但不能混用单引号和双引号：
			>>> print('hello, world')
			hello, world
		5.命令行模式和Python交互模式
			命令行模式下：
				1.可以执行python进入Python交互式环境：
					例：C:\> python
					Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。
					可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！
				2.也可以执行python hello.py运行一个.py文件
					例：C:\> python hello.py
					如果错误提示No such file or directory说明这个hello.py在当前目录找不到，
					必须先把当前目录切换到hello.py所在的目录下，才能正常执行：
					例：C:\> d:                                                 // 先进入指定的D盘
                        d:\> cd MyDevelopment\Python_Project\text               // 再进入D盘对应的.py目录文件夹下                               
						d:\MyDevelopment\Python_Project\text>python hello.py    // 执行对应.py项目                        
						Hello, world!  
	使用文本编辑器
		推荐两款文本编辑器：
			1.一个是Sublime Text，免费使用，但是不付费会弹出提示框：
			2.一个是Notepad++，免费使用，有中文界面：
			请注意，用哪个都行，但是绝对不能用Word和Windows自带的记事本。Word保存的不是纯文本文件，而记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM），结果会导致程序运行出现莫名其妙的错误。
		安装好文本编辑器后，输入以下代码：
			print('hello, world')
		把当前目录切换到hello.py所在目录，就可以运行这个程序了：
			C:\work>python hello.py
			hello, world
		小结
			用文本编辑器写Python程序，然后保存为后缀为.py的文件，就可以用Python直接运行这个程序了。
			Python的交互模式和直接运行.py文件有什么区别呢？
			直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。
			直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。
			用Python开发程序，完全可以一边在文本编辑器里写代码，一边开一个交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27'的超大显示器！
			
	Python代码运行助手
		Python代码运行助手可以让你在线输入Python代码，然后通过本机运行的一个Python脚本来执行代码。
	
	输入和输出
		输出(print())
			print()函数的几种用法：
			1.用print()在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出'hello, world'，用代码实现如下：
				>>> print('hello, world')
				hello, world
			2.print()函数也可以接受多个字符串，用逗号“,”隔开，逗号“,”会输出一个空格，就可以连成一串输出：
				>>> print('The quick brown fox', 'jumps over', 'the lazy dog')
				The quick brown fox jumps over the lazy dog
			3.print()也可以打印整数，或者计算结果：
				>>> print(100 + 200)
				300
				或者
				>>> print('100 + 200 =', 100 + 200)
				100 + 200 = 300
		输入(input())
			input()函数的几种用法：
			1.ython提供了一个input()，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：
				>>> name = input()
				Michael
			  你可以输入任意字符，然后按回车后完成输入。答案是存放到name变量里了。可以直接输入name查看变量内容：
				>>> name
				'Michael'
			2.name作为一个变量就是一个字符串。要打印出name变量的内容，除了直接写name然后按回车外，还可以用print()函数：
				>>> print("My name is",name)
				My name is Michael
			3.input()可以让你显示一个字符串来提示用户，于是我们把代码改成：
				>>> name = input('please enter your name: ')
				please enter your name: Michael
				>>> print('hello,', name)
				hello, Michael
    
Python基础	
    前言
        小结
            Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。
            在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。
            
    数据类型和变量
        数据类型
            1.整数
            2.浮点数
            3.字符串
                a.如果'本身也是一个字符，那就可以用""括起来，比如：
                    "I'm OK"
                b.如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
                    'I\'m \"OK\"!'表示的内容i'm "OK"!
                c.义字符\可以转义很多字符,比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\，
                  Python的交互式命令行print()打印字符串，比如：
                    >>> print('I\'m ok.')
                    I'm ok.
                    >>> print('I\'m learning\nPython.')
                    I'm learning
                    Python.
                    >>> print('\\\n\\')
                    \
                    \
                d.Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：
                    >>> print('\\\t\\')
                    \       \
                    >>> print(r'\\\t\\')
                    \\\t\\
                e.如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，可以自己试试：
                    >>> print('''line1
                    ... line2
                    ... line3''')
                    line1
                    line2
                    line3
                    注意：上面是在交互式命令行内输入，在输入多行内容时，提示符由>>>变为...，提示你可以接着上一行输入，注意...是提示符，不是代码的一部分。
                f.多行字符串'''...'''还可以在前面加上r使用，比如：
                    print(r'''line1
                    ... \nline2
                    ... line3''')
                    line1
                    \nline2
                    line3
                    或者
                    print('''line1
                    ... \nline2
                    ... line3''')
                    line1
                    
                    line2
                    line3
               4.布尔值
                    a.一个布尔值只有True、False两种值（请注意大小写），比如
                        >>> True
                        True
                        >>> False
                        False
                        >>> 3 > 2
                        True
                        >>> 3 > 5
                        False
                    b.布尔值可以用and、or和not运算，比如：
                        >>> True and True
                        True
                        >>> True and False
                        False
                        >>> False and False
                        False
                        >>> 5 > 3 and 3 > 1
                        True
                    c.or运算是或运算，只要其中有一个为True，or运算结果就是True：
                        >>> True or True
                        True
                        >>> True or False
                        True
                        >>> False or False
                        False
                        >>> 5 > 3 or 1 > 3
                        True
                    d.not运算是非运算，它是一个单目运算符，把True变成False，False变成True：
                        >>> not True
                        False
                        >>> not False
                        True
                        >>> not 1 > 2
                        True
                    e.布尔值经常用在条件判断中，比如：
                        if age >= 18:
                            print('adult')
                        else:
                            print('teenager')
                5.空值
                    空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。
                    此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。
                6.变量
                    a.变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。
                      变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头，比如：
                        
                    b.在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：
                        a = 123     # a是整数
                        print(a)
                        a = 'ABC'   # a变为字符串
                        print(a)
                7.语言分为’动态语言‘和‘静态语言’，变量本身类型不固定的语言叫做动态语言（比如：Python）；与之对应的是静态语言（比如：Java、C、C++）
                    Python解释器干了两件事情：
                        a.在内存中创建了一个'ABC'的字符串；
                        b.在内存中创建了一个名为a的变量，并把它指向'ABC'。
                8.常量
                    a.所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：
                    b.事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，常量也可以重复赋值，全部大写的变量名表示常量是习惯上的用法。
                    c.在Python中，有两种除法:
                      1)一种除法是/：
                        >>> 10 / 3
                        3.3333333333333335
                      2)还有一种除法是//，称为地板除，两个整数的除法仍然是整数：
                        >>> 10 // 3
                        3
                    d.所以Python还提供一个余数运算，可以得到两个整数相除的余数：
                        >>> 10 % 3
                        1
                    注意：无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。
                 
                小结：
                    Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。
                    对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的。随后对变量y的赋值不影响变量x的指向。
                    注意：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在-2147483648-2147483647。
                    Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。

    字符串和编码
        字符编码
            字符编码：ASCII，Unicode 和 UTF-8
            1.ASCLL：
                ASCII 码一共规定了128个字符的编码，只占用了一个字节的后面7位，最前面的一位统一规定为0。
            2.Unicode：
                a.Unicode 当然是一个很大的集合，每个符号的编码都不一样。
                b.Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。
                c.这里就有两个严重的问题，
                  第一个问题是，如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？
                  第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，
                                那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。
                
            3.UTF-8:
                a.互联网的普及，强烈要求出现一种统一的编码方式。UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。(UTF-8 是 Unicode 的实现方式之一)
                b.UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。
                c.UTF-8 的编码规则很简单，只有二条：
                  1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。
                  2）对于n字节的符号（n > 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。
                    例如：
                    Unicode符号范围     |        UTF-8编码方式
                    (十六进制)          |              （二进制）
                    --------------------+---------------------------------------------
                    0000 0000-0000 007F | 0xxxxxxx
                    0000 0080-0000 07FF | 110xxxxx 10xxxxxx
                    0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
                    0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

        Python的字符串
            1.Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：
                >>> print('包含中文的str')
                包含中文的str
            2.对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
                >>> ord('A')
                65
                >>> ord('中')
                20013
                >>> chr(66)
                'B'
                >>> chr(25991)
                '文'
            3.如果知道字符的整数编码，还可以用十六进制这么写str：（\u表示Unicode，\u0000~\uFFFF）
                >>> '\u4e2d\u6587'
                '中文
            4.Python对bytes类型的数据用带b前缀的单引号或双引号表示：
                x = b'ABC'
              以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
                >>> 'ABC'.encode('ascii')
                b'ABC'
                >>> '中文'.encode('utf-8')
                b'\xe4\xb8\xad\xe6\x96\x87'
                >>> '中文'.encode('ascii')
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
            5.在bytes中，无法显示为ASCII字符的字节，用\x##显示。
            6.以Unicode表示的str通过encode()方法可以编码为指定的bytes;
              如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法：
                例1：
                    >>> 'ABC'.encode('ascii')
                        b'ABC'
                    >>> '中文'.encode('utf-8')
                        b'\xe4\xb8\xad\xe6\x96\x87'
                    >>> b'ABC'.decode('ascii')
                        'ABC'
                    >>> b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
                        '中文'
                例2：
                    >>> x='中文'.encode('utf-8')
                    >>> print("%s"%(x))
                        b'\xe4\xb8\xad\xe6\x96\x87'
                    >>> xx=x.decode('utf-8')
                    >>> print("%s"%(xx))
                        中文
            7.len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：
                >>> len(b'ABC')
                3
                >>> len(b'\xe4\xb8\xad\xe6\x96\x87')
                6
                >>> len('中文'.encode('utf-8'))
                6
            8.在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。
            9.由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。
              当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
                #!/usr/bin/env python3          
                # -*- coding: utf-8 -*-
                a.第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
                b.第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
                c.申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：
            
        格式化
            1.在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
                >>> 'Hello, %s' % 'world'
                'Hello, world'
                >>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
                'Hi, Michael, you have $1000000.'
            2.%d表示整数，%s表示字符串，%f表示浮点数，%x表示十六进制整数；
              有几个%?占位符，后面就跟几个变量或者值。
            3.格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
                >>> print('%2d-%02d' % (3, 1))
                >>> print('%.2f' % 3.1415926)
                 3-01                               // 整数3为了占两位，前面有一个空格
                3.14
            4.如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
                >>> 'Age: %s. Gender: %s' % (25, True)
                'Age: 25. Gender: True'
            5.字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
                >>> 'growth rate: %d %%' % 7
                'growth rate: 7 %'
            6.另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
                >>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
                'Hello, 小明, 成绩提升了 17.1%'
               
        小结：
            Python 3的字符串使用Unicode，直接支持多语言。
            当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：
            >>> '中文'.encode('gb2312')
            b'\xd6\xd0\xce\xc4'
            但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。
        
    使用list和tuple
        list
            1.Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。
              比如，列出班里所有同学的名字，就可以用一个list表示：
                >>> classmates = ['Michael', 'Bob', 'Tracy']
                >>> classmates
                ['Michael', 'Bob', 'Tracy']
                >>> print("%s,%s,%s,%d,%s"%(classmates[-2],classmates[-1],classmates[0],len(classmates),classmates))
                lucy,luoluo,lily,3,['lily', 'lucy', 'luoluo']
              解释：变量classmates就是一个list。用len()函数可以获得list元素的个数：classmates[0]、classmates[1]和classmates[2]可获取成员变量值。
            2.当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是len(classmates) - 1。
              当索引==-1时，直接获取最后一个元素，以此类推，可以获取倒数第2个、倒数第3个：
                >>> classmates[-1]
                'Tracy'
                >>> classmates[-2]
                'Bob'
                >>> classmates[-3]
                'Michael'
              注意：获取倒数第4个就越界了，会报错误。
            3.list是一个可变的有序表，所以，可以往list中追加元素到末尾：
                >>> classmates.append('Adam')
                >>> classmates
                ['Michael', 'Bob', 'Tracy', 'Adam']
            4.也可以把元素插入到指定的位置，比如索引号为1的位置：
                >>> classmates.insert(1, 'Jack')        #也可以倒插入，如classmate.insert(-2,'Jack')
                >>> classmates
                ['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']
            5.删除list末尾的元素，用pop()方法：
                >>> classmates.pop()
                'Adam'
                >>> classmates
                ['Michael', 'Jack', 'Bob', 'Tracy']
              删除指定位置的元素，用pop(i)方法，其中i是索引位置：
                >>> classmates.pop(1)
                'Jack'
                >>> classmates
                ['Michael', 'Bob', 'Tracy']
            6.要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
                >>> classmates[1] = 'Sarah'
                >>> classmates
                ['Michael', 'Sarah', 'Tracy']                
            7.list里面的元素的数据类型也可以不同，比如：
                >>> L = ['Apple', 123, True]   
            8.list元素也可以是另一个list，比如：
                >>> s = ['python', 'java', ['asp', 'php'], 'scheme']
                >>> len(s)
                4
                >>> s = ['python', 'java', ['asp', 'php'], 'scheme']
                >>> print("%s,%s,%s,%d"%(s[2],s[2][0],s[2][1],len(s)))
                ['asp', 'php'],asp,php,4
                注意：s只有4个元素，其中s[2]又是一个list，如果拆开写就更容易理解了：
                      >>> p = ['asp', 'php']
                      >>> s = ['python', 'java', p, 'scheme']
                      拿到'php'可以写p[1]或者s[2][1]。
            9.如果一个list中一个元素也没有，就是一个空的list，它的长度为0：
                >>> L = []
                >>> len(L)
                0
        tuple
            1.另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：
                >>> classmates = ('Michael', 'Bob', 'Tracy')
            2.classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。
            3.因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
            4.tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：
                >>> t = (1, 2)
                >>> t
                (1, 2)
              如果要定义一个空的tuple，可以写成()：
                >>> t = ()
                >>> t
                ()
              要定义一个只有1个元素的tuple，如果你这么定义：
                >>> t = (1)
                >>> t
                1
              所以，只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：
                >>> t = (1,)
                >>> t
                (1,)
              注意：Python在显示只有1个元素的tuple时，也会加一个逗号,以免你误解成数学计算意义上的括号。
            6.最后来看一个“可变的”tuple：
                >>> t = ('a', 'b', ['A', 'B'])
                >>> t[2][0] = 'X'
                >>> t[2][1] = 'Y'
                >>> t
                ('a', 'b', ['X', 'Y'])
              注意：tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
        小结
            list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。
            
    条件判断
        1.用if语句实现：
            age = 3
            if age >= 18:
                print('adult')
            elif age >= 6:
                print('teenager')
            else:
                print('kid')
            或者
            if <条件判断1>:
                <执行1>
            elif <条件判断2>:
                <执行2>
            elif <条件判断3>:
                <执行3>
            else:
                <执行4>
            注意：不要少写了冒号:。
        2.if判断条件还可以简写，比如写：
            if x:
                print('True')
        3.再议 input
            最后看一个有问题的条件判断。很多同学会用input()读取用户的输入，这样可以自己输入，程序运行得更有意思： 
                birth = input('birth: ')
                if birth < 2000:
                    print('00前')
                else:
                    print('00后')
            上述程序会报错误，input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。
            需修改程序如下：
                s = input('birth: ')
                birth = int(s)
                if birth < 2000:
                    print('00前')
                else:
                    print('00后')
                    
    循环
        Python的循环有两种:
            1.for...in循环：
                1）Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：
                    names = ['Michael', 'Bob', 'Tracy']
                    for name in names:
                        print(name)
                2）所以for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句。
                  再比如我们想计算1-10的整数之和，可以用一个sum变量做累加：
                    sum = 0
                    for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
                        sum = sum + x
                    print(sum)
                3）如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。
                  比如range(5)生成的序列是从0开始小于5的整数：
                    >>> list(range(5))
                        [0, 1, 2, 3, 4]
            2.while循环：
                1）可以用while循环实现：
                    sum = 0
                    n = 99
                    while n > 0:
                        sum = sum + n
                        n = n - 2
                    print(sum)
                    注意：在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。
        break语句
            1.退出循环语句，break语句可以提前退出循环。例如，本来要循环打印1～100的数字：
                n = 1
                while n <= 100:
                    print(n)
                    n = n + 1
                print('END')
                解释：执行上面的代码可以看到，打印出1~10后，紧接着打印END，程序结束
        continue语句
            1.在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。
                n = 0
                while n < 10:
                    n = n + 1
                    if n % 2 == 0: # 如果n是偶数，执行continue语句
                        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
                    print(n)
                解释：执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。
                      可见continue的作用是提前结束本轮循环，并直接开始下一轮循环。
        小结
            循环是让计算机做重复任务的有效的方法。
            break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。
            要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。
            有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用Ctrl+C退出程序，或者强制结束Python进程。
            请试写一个死循环程序。
            
     使用dict和set
        1.dict
            1）Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
            举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：
                names = ['Michael', 'Bob', 'Tracy']
                scores = [95, 75, 85]
            2）如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：
                >>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
                >>> d['Michael']
                95
            3）把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：
                >>> d['Adam'] = 67
                >>> d['Adam']
                67
                >>> d['Adam'] = 34
                >>> d['Adam']
                34
            4）要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
                >>> 'Thomas' in d
                False
               二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
                >>> d.get('Thomas')
                None
                >>> d.get('Thomas', -1)             #如果key不存在，-1可以修改为任意的返回值
                -1
            5）要删除一个key，用pop(key)方法，对应的value也会从dict中删除：
                >>> d.pop('Bob')
                75
                >>> d
                {'Michael': 95, 'Tracy': 85}
            6）请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。
            7）和list比较，dict有以下几个特点：
                查找和插入的速度极快，不会随着key的增加而变慢；
                需要占用大量的内存，内存浪费多。
               而list相反：
                查找和插入的时间随着元素的增加而增加；
                占用空间小，浪费内存很少。
            8）所以，dict是用空间来换取时间的一种方法。 dict可以用在需要高速查找的很多地方，
               在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
               这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。
               这个通过key计算位置的算法称为哈希算法（Hash）。要保证hash的正确性，作为key的对象就不能变。
               在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：
                >>> key = [1, 2, 3]
                >>> d[key] = 'a list'
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                TypeError: unhashable type: 'list'
        2.set
            1）set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，
               所以，在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合：
                >>> s = set([1, 2, 3])
                >>> s
                {1, 2, 3}
            2）重复元素在set中自动被过滤：
                >>> s = set([1, 1, 2, 2, 3, 3])
                >>> s
                {1, 2, 3}
            3）通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：
                >>> s.add(4)
                >>> s
                {1, 2, 3, 4}
                >>> s.add(4)
                >>> s
                {1, 2, 3, 4}
            4）通过remove(key)方法可以删除元素：
                >>> s.remove(4)
                >>> s
                {1, 2, 3}
            5）set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：
                >>> s1 = set([1, 2, 3])
                >>> s2 = set([2, 3, 4])
                >>> s1 & s2
                {2, 3}
                >>> s1 | s2
                {1, 2, 3, 4}
        注意：set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，
              因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。
        3.再议不可变对象
            1）上面我们讲了，str是不变对象，而list是可变对象。
               对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：
                >>> a = ['c', 'b', 'a']
                >>> a.sort()
                >>> a
                ['a', 'b', 'c']
            2）而对于不可变对象，比如str，对str进行操作呢：
                >>> a = 'abc'
                >>> a.replace('a', 'A')
                'Abc'
                >>> a
                'abc'
            3）虽然字符串有个replace()方法，也确实变出了'Abc'，但变量a最后仍是'abc'，应该怎么理解呢？
               我们先把代码改成下面这样：
                >>> a = 'abc'
                >>> b = a.replace('a', 'A')
                >>> b
                'Abc'
                >>> a
                'abc'
            4）要始终牢记的是，a是变量，而'abc'才是字符串对象！有些时候，我们经常说，对象a的内容是'abc'，但其实是指，a本身是一个变量，它指向的对象的内容才是'abc'：
            5）当我们调用a.replace('a', 'A')时，实际上调用方法replace是作用在字符串对象'abc'上的，而这个方法虽然名字叫replace，
               但却没有改变字符串'abc'的内容。相反，replace方法创建了一个新字符串'Abc'并返回，如果我们用变量b指向该新字符串，
               就容易理解了，变量a仍指向原有的字符串'abc'，但变量b却指向新字符串'Abc'了：
            6）所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。
        小结
            使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。
            tuple虽然是不变对象，但试试把(1, 2, 3)和(1, [2, 3])放入dict或set中，并解释结果。
            
函数
    前言
        抽象
    调用函数
        1.Python内置了很多有用的函数，我们可以直接调用。比如求绝对值的函数abs，只有一个参数。可以直接从Python的官方网站查看文档：
          http://docs.python.org/3/library/functions.html#abs
          调用abs函数：（参数可以是整数或浮点数。）
            >>> abs(100)
            100
            >>> abs(-20)
            20
            >>> abs(12.34)
            12.34
        2.而max函数max()可以接收任意多个参数，并返回最大的那个：
            >>> max(1, 2)
            2
            >>> max(2, 3, 1, -5)
            3
        3.数据类型转换,Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数：
            >>> int('123')
            123
            >>> int(12.34)
            12
            >>> float('12.34')
            12.34
            >>> str(1.23)
            '1.23'
            >>> str(100)
            '100'
            >>> bool(1)
            True
            >>> bool('')
            False
        4.函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：
            >>> a = abs # 变量a指向abs函数
            >>> a(-1) # 所以也可以通过a调用abs函数
            1
        5.hex() 函数用于将10进制整数转换成16进制，以字符串形式表示。
            >>>hex(255)
            '0xff'
            >>> hex(-42)
            '-0x2a'
            >>> type(hex(12))
            <class 'str'>      # 字符串,type命令可显示字符的类型
        小结
            调用Python的函数，需要根据函数定义，传入正确的参数。如果函数调用出错，一定要学会看错误信息，所以英文很重要！
    定义函数
        前言
            1.在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。
                我们以自定义一个求绝对值的my_abs函数为例：
                    def my_abs(x):
                        if x >= 0:
                            return x
                        else:
                            return -x
                    print(my_abs(-234))
                    打印：234
            2.如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）
                ┌────────────────────────────────────────────────────────┐
                │Command Prompt - python                           - □ x │
                ├────────────────────────────────────────────────────────┤
                │>>> from abstest import my_abs                          │
                │>>> my_abs(-9)                                          │
                │9                                                       │
                │>>> _    
        空函数
            1.如果想定义一个什么事也不做的空函数，可以用pass语句：
                def nop():
                    pass
              pass还可以用在其他语句里，比如：
                if age >= 18:
                    pass
              实际上pass可以用来作为占位符，缺少了pass，代码运行就会有语法错误。
            2.
        参数检查
            1.调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
                >>> my_abs(1, 2)
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                TypeError: my_abs() takes 1 positional argument but 2 were given
            2.但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：
                >>> my_abs('A')
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                  File "<stdin>", line 2, in my_abs
                TypeError: unorderable types: str() >= int()
                >>> abs('A')
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                TypeError: bad operand type for abs(): 'str'
               上述自定义的my_abs函数报错和abs不一样，因为自定义的my_abs函数，对参数类型做检查，只允许整数和浮点数类型的参数。
               数据类型检查可以用内置函数isinstance()实现：
                    def my_abs(x):
                        if not isinstance(x, (int, float)):
                            raise TypeError('bad operand type')
                        if x >= 0:
                            return x
                        else:
                            return -x
        返回多个值
            1.比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：
                import math
                def move(x, y, step, angle=0):
                    nx = x + step * math.cos(angle)
                    ny = y - step * math.sin(angle)
                    return nx, ny
              import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。
            2.然后，我们就可以同时获得返回值：
                >>> x, y = move(100, 100, 60, math.pi / 6)
                >>> print(x, y)
                151.96152422706632 70.0
            3.但其实这只是一种假象，Python函数返回的仍然是单一值：
                >>> r = move(100, 100, 60, math.pi / 6)
                >>> print(r)
                (151.96152422706632, 70.0)
            4.原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。
        小结
            定义函数时，需要确定函数名和参数个数；
            如果有必要，可以先对参数的数据类型做检查；
            函数体内部可以用return随时返回函数结果；
            函数执行完毕也没有return语句时，自动return None。
            函数可以同时返回多个值，但其实就是一个tuple。
        练习
            计算平方根可以调用math.sqrt()函数：
            >>> import math
            >>> math.sqrt(2)
            1.4142135623730951
    函数的参数
        位置参数
            1.我们先写一个计算x^2的函数：
                def power(x):
                    return x * x
            2.你也许想到了，可以把power(x)修改为power(x, n)，用来计算xn，说干就干：
                def power(x, n):
                    s = 1
                    while n > 0:
                        n = n - 1
                        s = s * x
                    return s
                >>> power(5,3)
                125
        默认参数
            1.如果设置了默认参数，传递的实参可以缺少一个：
                def power(x, n=2):
                    s = 1
                    while n > 0:
                        n = n - 1
                        s = s * x
                    return s
                >>> power(5)
                25
                >>> power(5,2)
                25
            2.设置默认参数的要点：
                1）必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；
                2）如何设置默认参数：当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
            3.使用默认参数有什么好处？最大的好处是能降低调用函数的难度。
                1）举个例子，我们写个一年级小学生注册的函数，需要传入name和gender两个参数：
                    def enroll(name, gender):
                    print('name:', name)
                    print('gender:', gender)
                    >>> enroll('Sarah', 'F')
                    name: Sarah
                    gender: F
                2）要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。
                   我们可以把年龄和城市设为默认参数：
                    def enroll(name, gender, age=6, city='Beijing'):
                    print('name:', name)
                    print('gender:', gender)
                    print('age:', age)
                    print('city:', city)
                    >>> enroll('Sarah', 'F')
                    name: Sarah
                    gender: F
                    age: 6
                    city: Beijing
                3）只有与默认参数不符的学生才需要提供额外的信息（默认参数降低了函数调用的难度）：
                    enroll('Bob', 'M', 7)                       # 有多个默认参数时，调用的时候，既可以按顺序提供默认参数 
                    enroll('Adam', 'M', city='Tianjin')         # 也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上
            4.默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：
                1）先定义一个函数，传入一个list，添加一个END再返回：
                    def add_end(L=[]):
                        L.append('END')
                        return L
                    >>> add_end([1, 2, 3])
					[1, 2, 3, 'END']
					>>> add_end(['x', 'y', 'z'])
					['x', 'y', 'z', 'END']
                2）当你使用默认参数调用时，一开始结果也是对的,但是，再次调用add_end()时，结果就不对了（单独调用add_end()每次会记忆上次的值）：
                	>>> add_end()
					['END']
					>>> add_end()
					['END', 'END']
					>>> add_end()
					['END', 'END', 'END']
                	注意：
                		上述问题的解释：定义为list的L是一个默认参数，因为默认参数L也是一个变量，他指向对象[]，每次改变了L的内容，下次调用时，默认参数的内容就变了（例如：上面调用一次后，默认参数就变为L=['END']了），不再是函数定义时的[]了。
                    总结： 定义默认参数要牢记一点：默认参数必须指向不变对象！
                3）修改上面的例子，我们可以用None这个不变对象来实现（把默认参数指向不变对象）：
                	def add_end(L=None):		# None表示空对象
					    if L is None:
					        L = []
					    L.append('END')
					    return L 
					>>>add_end()
					['END']
					>>> add_end()
					['END']
				总结：为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。
        可变参数
        	1.在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。
        	2.我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。
        		a.我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：
					def calc(numbers):
					    sum = 0
					    for n in numbers:
					        sum = sum + n * n
					    return sum
				b.但是调用的时候，需要先组装出一个list或tuple（如果用上面的calc()函数，只能组装成list或tuple，作为一个变量传递进去）：
					>>> calc([1, 2, 3])
					14
					>>> calc((1, 3, 5, 7))
					84
					>>> calc(1, 2, 3)			# 失败，不支持多个变量传递
				c.我们把函数的参数改为可变参数,如果利用可变参数，调用函数的方式可以简化成这样（可以传递多个变量）：
					def calc(*numbers):			# 与上面命令不一样，多了个*号
					    sum = 0
					    for n in numbers:
					        sum = sum + n * n
					    return sum
					>>> calc(1, 2, 3)			# 与上面命令不一样，少了两个括号
					14
					>>> calc(1, 3, 5, 7)
					84
				d.定义一个可变函数（*numbers）和定义一个list或tuple参数（numbers）相比，仅仅在参数前面加了一个*号。但是，调用该函数（*numbers）时，可以传入任意个参数，包括0个参数：
					calc_value_1 = 2
					calc_value_2 = 3
					calc_value_3 = 4
					>>> calc(calc_value_1,calc_value_2,calc_value_3)
					29
					>>> calc()
					0
				e.如果已经有一个list或者tuple，仍要调用一个可变参数（*numbers）怎么办？可以这样做：
					>>> nums = [1, 2, 3]		# 如果定义tuple，nums=(1, 2, 3)一样的运用方法
					>>> calc(nums[0], nums[1], nums[2])
					14
					"或者"
					>>> nums = [1, 2, 3]		# 如果定义tuple，nums=(1, 2, 3)一样的运用方法
					>>> calc(*nums)				# *nums表示把list的所有元素强制转换为可变函数传递进函数
					14
					注意：*nums表示把nums这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。
        关键字参数
        	1.可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。
        	请看示例：
				def person(name, age, **kw):
				    print('name:', name, 'age:', age, 'other:', kw)
        	2.函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数：
				>>> person('Michael', 30)
				name: Michael age: 30 other: {}
			3.也可以传入任意个数的关键字参数：
				>>> person('Bob', 35, city='Beijing')
				name: Bob age: 35 other: {'city': 'Beijing'}
				>>> person('Adam', 45, gender='M', job='Engineer')
				name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
			4.关键字参数有什么用？
				它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。	
			5.和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
				>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
				>>> person('Jack', 24, city=extra['city'], job=extra['job'])
				name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
			  当然，上面复杂的调用可以用简化的写法：
				>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
				>>> person('Jack', 24, **extra)
				name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
			总结：**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。
        命名关键字参数
        	1.对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。
        	2.仍以person()函数为例，我们希望检查是否有city和job参数：
        		def person(name, age, **kw):
				    if 'city' in kw:
				        # 有city参数
				        pass
				    if 'job' in kw:
				        # 有job参数
				        pass
				    print('name:', name, 'age:', age, 'other:', kw)
			3.但是调用者仍可以传入不受限制的关键字参数：
				>>> person('Jack', 24, city='Beijing', addr='Chaoyang', zipcode=123456)
			4.如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
				def person(name, age, *, city, job):		# 命名关键字参数需要添加分隔符*，*后面的参数被视为命名关键字参数。
				    print(name, age, city, job)
				>>> person('Jack', 24, city='Beijing', job='Engineer')
				Jack 24 Beijing Engineer
				注意：和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。
			5.如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：
				def person(name, age, *args, city, job):
    				print(name, age, args, city, job)
    				>>> person('Jack', 24, 'Beijing', 'Engineer')	
					Traceback (most recent call last):
					  File "<stdin>", line 1, in <module>
					TypeError: person() takes 2 positional arguments but 4 were given
				注意：命名关键字参数必须传入参数名（city和job），否则报错，正确写法参考第4点
			6.命名关键字参数可以有缺省值，从而简化调用：
				def person(name, age, *, city='Beijing', job):
				    print(name, age, city, job)
				    >>> person('Jack', 24, job='Engineer')
					Jack 24 Beijing Engineer
				注意：由于命名关键字参数city具有默认值，调用时，可不传入city参数。
			总结：使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python解释器将无法识别位置参数和命名关键字参数：
				def person(name, age, city, job):
				    # 缺少 *，city和job被视为位置参数
				    pass
        参数组合
        	1.在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
			2.比如定义一个函数，包含上述若干种参数：
				def f1(a, b, c=0, *args, **kw):
				    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)
				def f2(a, b, c=0, *, d, **kw):
				    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)
			3.在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。
				>>> f1(1, 2)
				a = 1 b = 2 c = 0 args = () kw = {}
				>>> f1(1, 2, c=3)
				a = 1 b = 2 c = 3 args = () kw = {}
				>>> f1(1, 2, 3, 'a', 'b')
				a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
				>>> f1(1, 2, 3, 'a', 'b', x=99)
				a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
				>>> f2(1, 2, d=99, ext=None)
				a = 1 b = 2 c = 0 d = 99 kw = {'ext': None}
			4.最神奇的是通过一个tuple和dict，你也可以调用上述函数：
				>>> args = (1, 2, 3, 4)
				>>> kw = {'d': 99, 'x': '#'}
				>>> f1(*args, **kw)
				a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}
				>>> args = (1, 2, 3)
				>>> kw = {'d': 88, 'x': '#'}
				>>> f2(*args, **kw)
				a = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}
			5.所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。
 			6.虽然可以组合多达5种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。
 		小结
			Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
			默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
			要注意定义可变参数和关键字参数的语法：
			*args是可变参数，args接收的是一个tuple；
			**kw是关键字参数，kw接收的是一个dict。
			以及调用函数时如何传入可变参数和关键字参数的语法：
			可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入：func(*(1, 2, 3))；
			关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：func(**{'a': 1, 'b': 2})。
			使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。
			命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。
			定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符*，否则定义的将是位置参数。
		