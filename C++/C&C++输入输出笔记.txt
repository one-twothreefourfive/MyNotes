C常用的输入/输出命令：
	1、getchar() & putchar() 函数，标准函数
	2、gets() & puts() 函数，标准函数
	3、scanf() 和 printf() 函数，标准函数
	4、getch() 函数，非标准函数，请注意移植性
	5、getche() 函数，非标准函数，请注意移植性

	1、getchar() & putchar()函数
		#include <stdio.h>
		int main( )
		{
		   int c;
		 
		   printf( "Enter a value :");
		   c = getchar( );
		 
		   printf( "\nYou entered: ");
		   putchar( c );
		   printf( "\n");
		   return 0;
		}
		Enter a value :runoob
		
		You entered: r

		1）getchar()解释：
			a、int getchar(void) 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。您可以在循环内使用这个方法，以便从屏幕上读取多个字符。
			b、它与getch()、getche()的区别在于: getchar()函数等待输入直到按回车才结束,  回车前的所有输入字符都会逐个显示在屏幕上，但只有第一个字符作为有效值返回。
		2）putchar()解释：int putchar(int c) 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。您可以在循环内使用这个方法，以便在屏幕上输出多个字符。
	2、gets() & puts() 函数
		#include <stdio.h>
		int main( )
		{
		   char str[100];
		 
		   printf( "Enter a value :");
		   gets( str );
		 
		   printf( "\nYou entered: ");
		   puts( str );
		   return 0;
		}
		Enter a value :runoob

		You entered: runoob

		1）gets()解释：char *gets(char *s) 函数从 stdin 读取一行到 s 所指向的缓冲区，直到一个终止符或 EOF。
		2）puts()解释：int puts(const char *s) 函数把字符串 s 和一个尾随的换行符写入到 stdout。
	3、scanf() 和 printf() 函数
		#include <stdio.h>
		int main( ) {
		 
		   char str[100];
		   int i;
		 
		   printf( "Enter a value :");
		   scanf("%s %d", str, &i);
		 
		   printf( "\nYou entered: %s %d ", str, i);
		   printf("\n");
		   return 0;
		}
		Enter a value :runoob 123

		You entered: runoob 123

		1）scanf()解释：int scanf(const char *format, ...) 函数从标准输入流 stdin 读取输入，并根据提供的 format 来浏览输入。
		2）printf()解释：int printf(const char *format, ...) 函数把输出写入到标准输出流 stdout ，并根据提供的格式产生输出。
		3）format解释：可以是一个简单的常量字符串，但是您可以分别指定 %s、%d、%c、%f 等来输出或读取字符串、整数、字符或浮点数。还有许多其他可用的格式选项，可以根据需要使用。
	4、getch() 函数   // 头文件#include<conio.h>
		用法1：
			#include<stdio.h> 
			#include<conio.h>
			main ()
			{
				char ch;
				ch=getch();                        //
				std::cout<<ch<<std::endl;
			}
			输入：j
			输出：j

			用法1解释：从键盘上读入一个字符, 读入的字符不能回显在屏幕上，无需回车或其他按键，立即执行下一条cout流语句，cout流用于显示字符ch。
		用法2：
			#include<stdio.h> 
			#include<conio.h>
			main() 
			{ 
				char c; 
				while ((c=getchar())!='/n')   /*每个getchar()依次读入一个字符*/
				printf("%c",c);    /*按照原样输出*/
				getch();       /*等待按任一健*/ 
			}

			用法2解释：程序的末尾加上它，利用它来实现程序运行完了暂停不退出的效果。
		用法3：
			#include<stdio.h>
			#include<conio.h>
			void main()
			{
				char ch;
				for(int i=0;i<5;i++)
				{
					ch=getch();
					//printf("%c",ch);
				}
			}

			用法3解释：按5次任意键程序就结束了，且屏幕上什么都没有显示。
		用法4：
			#include<stdio.h>
			#include<conio.h>
			void main()
			{
			    char ch='*';
			    while(ch=='*')
			    {
			        printf("/n按 * 继续循环，按其他键退出！");
			        ch=getch();
			    }
			    printf("/n退出程序！");
			}
			用法4解释：可实现屏幕无回显的情况下，任意键退出效果；在无回显情况下，其他命令暂时未找到实现此效果的方法。

		注意：函数原型是int getch(void)，C语言的函数，C++也可以兼容，但是尽量不用或少用。
	5、getche(); 	// 头文件#include<conio.h>
		#include<stdio.h> 
		#include<conio.h>
		main ()
		{
			char ch;
			ch=getche();              
		}

		输入：j
		输出：j

		getche解释：函数原型是int getche(void);从键盘上读入一个字符, 读入的字符并回显在屏幕上，然后跳转下一条语句。

	注意：C语言的函数，C++也可以兼容，但是尽量不用或少用。

C++常用的输入/输出命令：
	1、C++输入流与输出流的基本操作
		cin语句的一般格式为：
		    cin>>变量1>>变量2>>……>>变量n;
		cout语句的一般格式为：
		    cout<<表达式1<<表达式2<<……<<表达式n;
	2、标准输入流（cin）和输出流（cout）  
		用法1：最基本，也是最常用的用法，输入一个数字：
			#include <iostream>
			using namespace std;
			main ()
			{
				int a,b;
				cin>>a>>b;
				cout<<a+b<<endl;
			}
			输入：2[回车]3[回车] 或者 2[空格]3[回车] 或者 2[TAB]3[回车]
			输出：5

		用法2：接受一个字符串，遇“空格”、“TAB”、“回车”都结束
			#include <iostream>
			using namespace std;
			main ()
			{
				char a[20];
				cin>>a;
				cout<<a<<endl;
			}
			输入：jkljkljkl
			输出：jkljkljkl

			输入：jkljkl jkljkl       //遇空格结束
			输出：jkljkl

		 cin解释：C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。流提取运算符 >> 在一个语句中可以多次使用。
		 cout解释：C++ 编译器根据要输出变量的数据类型，选择合适的流插入运算符来显示值。<< 运算符被重载来输出内置类型（整型、浮点型、double 型、字符串和指针）的数据项。流插入运算符 << 在一个语句中可以多次使用，如上面实例中所示，endl 用于在行末添加一个换行符。

C++的输入/输出（I/O）的特点：
	1、就像C语言具有自己的标准I/O函数库一样，C++特性之一就是自身拥有一套新的I/O程序和概念。C++有一个iostream.h头文件，提供I/O接口，更符合OOP的理念。
	2、C++使用<<操作符（输出，或称“插入”）和>>操作符（输入，或称“提取”）来替代C语言的putchar()和getchar()等函数。
	3、<<和>>操作符在C语言中用作左移位和右移位操作符，但它们被重载用于C++的IO。编译器查看操作数的类型，决定是产生移位代码还是I/O代码。如果左边的操作数是一个流（stream），该操作符就作为I/O操作符。
	4、iostream.h头文件定义的流（stream），包括了 cin、cout、cerr 和 clog 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。
	5、使用操作符而不是函数来操作I/O具有四个巨大的优点：
		1）操作符可被定义，用于任何类型。这样就不需要为每种类型准备一个单独的函数或者字符串格式化限定符如%d。
		2）与使用函数相比，当你输出多条信息时，使用操作符操作I/O具有概念上的方便性。就像可以书写i+j+k+l这样的表达式一样，操作符的左结合性确保你可以合理的把多个I/O操作数链在一起：
			cout<<"the value is"<< i <<endl;
		3）它提供一个附加的层，简化了类似scanf()这样的函数的格式控制和使用方法。我们应该认识到scanf()家族确实应该简化（尽管它的手册非常简短）。
		4）对<<和>>操作符进行重载，在一个单一的操作中读取和书写整个对象不仅是可能的，而且是非常重要的。在前面的章节里已经有过一个这样的重载例子。
	6、你仍然可以在C++中使用C语言的stdio.h中的函数，但尽早转向C++的I/O特性是非常值得的。

注意：C语言标准函数有很多危险函数，例如：scanf()、gets()、fgets()、strcpy()、strcat() 等，但它们都有一个缺陷，就是不安全，可能会导致数组溢出或者缓冲区溢出，让黑客有可乘之机，从而发起“缓冲区溢出”攻击。必要用替代的安全函数或者不使用！！

C++文件流的基本用法：
	前沿： C++标准库fstream，它定义三个新的数据类型：ofstream、ifstream、fstream。
		#include <fstream>
		ofstream         //文件写操作 内存写入存储设备 
		ifstream         //文件读操作，存储设备读区到内存中
		fstream          //读写操作，对打开的文件可进行读写操作 
	1、打开文件
		1）在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofsream、ifstream、fstream对象进行文件的读写操作。
		2）函数open()：
			public member function
			void open ( const char * filename,
			            ios_base::openmode mode = ios_base::in | ios_base::out );
			void open(const wchar_t *_Filename,
			        ios_base::openmode mode= ios_base::in | ios_base::out,
			        int prot = ios_base::_Openprot)；
		3）参数：	filename    操作文件名
        		mode        打开文件的方式
				prot        打开文件的属性   //基本很少用到，在查看资料时，发现有两种方式
		4）打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：
			ios::in		打开文件用于读取。
			ios::out	打开文件用于写入。
			ios::ate	文件打开后定位到文件末尾。
			ios::app	追加模式。所有写入都追加到文件末尾。
			ios::trunc	如果文件已存在则先删除该文件
			ios::binary	二进制方式
		5）这些方式能进行组合使用，以“或”或者“|”的方式：
			例1：
				ofstream outfile;
				outfile.open("file.dat", ios::out | ios::trunc );              //写入模式打开文件，并希望截断文件，以防文件已存在。
			例2：
				fstream  afile;
				afile.open("file.dat", ios::out | ios::in );	//打开文件用于读和写
			例3：
				ofstream out;
				out.open("Hello.txt", ios::in|ios::out|ios::binary)                 //打开2进制文件，用于读和写
		6）打开文件的属性同样在ios类中也有定义：
			0	普通文件，打开操作
			1	只读文件
			2	隐含文件
			4	系统文件
		对于文件的属性也可以使用“或”运算和“+”进行组合使用，这里就不做说明了。

		注意：很多程序中，可能会碰到ofstream out("Hello.txt"), ifstream in("..."),fstream foi("...")这样的的使用，并没有显式的去调用open（）函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数,并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：
			ofstream out("...", ios::out);
			ifstream in("...", ios::in);
			fstream foi("...", ios::in|ios::out);
	2、关闭文件
		1）当C++程序终止时，它会自动关闭刷新所有流，释放所有内存，并关闭所有打开的文件。但程序员应该养成一个好习惯，在程序终止前关闭所有打开的文件。
		2）下面时close()函数的标准语法，close()函数是fstream、ifstream、ofstream对象的一个成员：
			void close();
		3）当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。这个函数一旦被调用，原先的流对象就可以被用来打开其它的文件了，这个文件也就可以重新被其它的进程所访问了。为防止流对象被销毁时还联系着打开的文件，析构函数将会自动调用关闭函数close。
	3、写入文件
		1）类ofstream, ifstream 和fstream 是分别从ostream, istream 和iostream 中引申而来的。这就是为什么 fstream 的对象可以使用其父类的成员来访问数据。一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin 和 cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符<<：
		    // writing on a text file
		    #include <fiostream.h>
		    int main () {
		        ofstream out("out.txt");
		        if (out.is_open()) 
		       {
		            out << "This is a line.\n";
		            out << "This is another line.\n";
		            out.close();
		        }
		        return 0;
		    }
		   //结果: 在out.txt中写入：
		   This is a line.
		   This is another line 
		2）从文件中读入数据也可以用与 cin>>的使用同样的方法：
			// reading a text file
		    #include <iostream.h>
		    #include <fstream.h>
		    #include <stdlib.h>
		    
		    int main () {
		        char buffer[256];
		        ifstream in("test.txt");
		        if (! in.is_open())
		        { cout << "Error opening file"; exit (1); }
		        while (!in.eof() )
		        {
		            in.getline (buffer,100);
		            cout << buffer << endl;
		        }
		        return 0;
		    }
		    //结果 在屏幕上输出
		    This is a line.
		    This is another line
		    上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof ，它是ifstream 从类 ios 中继承过来的，当到达文件末尾时返回true 。
		3）状态标志符的验证(Verification of state flags)
			除了eof()以外，还有一些验证流的状态的成员函数（所有都返回bool型返回值）：
				bad()
					如果在读写过程中出错，返回 true 。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。

				fail()
					除了与bad() 同样的情况下会返回 true 以外，加上格式错误时也返回true ，例如当想要读入一个整数，而获得了一个字母的时候。

				eof()
					如果读文件到达文件末尾，返回true。

				good()
					这是最通用的：如果调用以上任何一个函数返回true 的话，此函数返回 false 。
					要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear()，没有参数。
			要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear()，没有参数。
		4）获得和设置流指针(get and put stream pointers)
			所有输入/输出流对象(i/o streams objects)都有至少一个流指针：
				ifstream， 类似istream, 有一个被称为get pointer的指针，指向下一个将被读取的元素。
				ofstream, 类似 ostream, 有一个指针 put pointer ，指向写入下一个元素的位置。
				fstream, 类似 iostream, 同时继承了get 和 put
			我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：
				tellg() 和 tellp()
					这两个成员函数不用传入参数，返回pos_type 类型的值(根据ANSI-C++ 标准) ，就是一个整数，代表当前get 流指针的位置 (用tellg) 或 put 流指针的位置(用tellp).

				seekg() 和seekp()
					这对函数分别用来改变流指针get 和put的位置。两个函数都被重载为两种不同的原型：

					seekg ( pos_type position );
					seekp ( pos_type position );
					使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数 tellg 和tellp 的返回值类型相同。

					seekg ( off_type offset, seekdir direction );
					seekp ( off_type offset, seekdir direction );
					使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：
						ios::beg	从流开始位置计算的位移
						ios::cur	从流指针当前位置开始计算的位移
						ios::end	从流末尾处开始计算的位移
			流指针 get 和 put 的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg 和 seekp的第一种原型，而且不要对tellg 或 tellp 的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。

			以下例子使用这些函数来获得一个二进制文件的大小： 
				// obtaining file size
			    #include <iostream.h>
			    #include <fstream.h>
			    
			    const char * filename = "test.txt";
			    
			    int main () {
			        long l,m;
			        ifstream in(filename, ios::in|ios::binary);
			        l = in.tellg();
			        in.seekg (0, ios::end);
			        m = in.tellg();
			        in.close();
			        cout << "size of " << filename;
			        cout << " is " << (m-l) << " bytes.\n";
			        return 0;
			    }
				//结果:
				size of example.txt is 40 bytes.
	4、二进制文件
		1）在二进制文件中，使用<< 和>>，以及函数（如getline）来操作符输入和输出数据，没有什么实际意义，虽然它们是符合语法的。

		2）文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数 (write) 是ostream 的一个成员函数，都是被ofstream所继承。而read 是istream 的一个成员函数，被ifstream 所继承。类 fstream 的对象同时拥有这两个函数。它们的原型是：
			write ( char * buffer, streamsize size );
			read ( char * buffer, streamsize size );
			这里 buffer 是一块内存的地址，用来存储或读出数据。参数size 是一个整数值，表示要从缓存（buffer）中读出或写入的字符数。
		3）案例：
			// reading binary file
		    #include <iostream>
		    #include <fstream.h>
		    
		    const char * filename = "test.txt";
		    
		    int main () {
		        char * buffer;
		        long size;
		        ifstream in (filename, ios::in|ios::binary|ios::ate);
		        size = in.tellg();
		        in.seekg (0, ios::beg);
		        buffer = new char [size];
		        in.read (buffer, size);
		        in.close();
		        
		        cout << "the complete file is in a buffer";
		        
		        delete[] buffer;
		        return 0;
		    }
		    //运行结果：
		    The complete file is in a buffer
	5、缓存和同步(Buffers and Synchronization)
		1）当我们对文件流进行操作的时候，它们与一个streambuf 类型的缓存(buffer)联系在一起。这个缓存（buffer）实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流， 每次成员函数put (写一个单个字符)被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存（buffer）中。
		2）当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中（如果是一个输出流的话），或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronization)，它会在以下任一情况下发生：
			a、当文件被关闭时: 在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。
			b、当缓存buffer 满时:缓存Buffers 有一定的空间限制。当缓存满时，它会被自动同步。
			c、控制符明确指明:当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush 和endl。
			d、明确调用函数sync(): 调用成员函数sync() (无参数)可以引发立即同步。这个函数返回一个int 值，等于-1 表示流没有联系的缓存或操作失败。


 



			 

